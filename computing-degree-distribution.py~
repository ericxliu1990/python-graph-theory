"""
A program for computing degree distributons for graphs
"""

#the example graphs
EX_GRAPH0 = {0: set([1, 2]), 1: set([]), 2: set([])}
EX_GRAPH1 = {0: set([1, 4, 5]), 1: set([2, 6]),2: set([3]),
		3: set([0]), 4: set([1]), 5: set([2]),
		6: set([])}
EX_GRAPH2 = {0: set([1, 4, 5]), 1: set([2, 6]), 2: setA([3, 7]),
		3: set([7]), 4: set([1]), 5: set([2]),
		6: set([]), 7: set([3]), 8: set([1, 2]),
		9: set([0, 3, 4, 5, 6, 7])}

def make_complete_graph(num_nodes):
	"""
	take a number and return complete graph of that number
	"""
	complete_graph = dict()
	for index_i in range(num_nodes):
		a_set = set([])
		for index_j in range(num_nodes):
			if not index_j  == index_i:
				a_set.add(index_j)
		complete_graph[index_i] = a_set
	return complete_graph

